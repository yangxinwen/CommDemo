// Generated by the protocol buffer compiler.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Service
{

    public static partial class DataChangeModel
    {

        #region Extension registration
        public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
        {
        }
        #endregion
        #region Static variables
        internal static pbd::MessageDescriptor internal__static_Test_ExchangeData__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::Service.ExchangeData, global::Service.ExchangeData.Builder> internal__static_Test_ExchangeData__FieldAccessorTable;
        #endregion
        #region Descriptor
        public static pbd::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbd::FileDescriptor descriptor;

        static DataChangeModel()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                "CgljZnMucHJvdG8SBFRlc3QiXAoMRXhjaGFuZ2VEYXRhEhIKClNlcXVlbmNl" +
                "SWQYASACKAcSEwoLTWVzc2FnZVR5cGUYAiACKAgSEQoJSXNSZXF1ZXN0GAMg" +
                "AigIEhAKCEpzb25Cb2R5GAQgASgJ");
            pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root) {
                descriptor = root;
                internal__static_Test_ExchangeData__Descriptor = Descriptor.MessageTypes[0];
                internal__static_Test_ExchangeData__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Service.ExchangeData, global::Service.ExchangeData.Builder>(internal__static_Test_ExchangeData__Descriptor,
                        new string[] { "SequenceId", "MessageType", "IsRequest", "JsonBody", });
                return null;
            };
            pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
                new pbd::FileDescriptor[] {
                }, assigner);
        }
        #endregion

    }
    #region Messages
    public sealed partial class ExchangeData : pb::GeneratedMessage<ExchangeData, ExchangeData.Builder>
    {
        private static readonly ExchangeData defaultInstance = new Builder().BuildPartial();
        public static ExchangeData DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ExchangeData DefaultInstanceForType
        {
            get { return defaultInstance; }
        }

        protected override ExchangeData ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::Service.DataChangeModel.internal__static_Test_ExchangeData__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ExchangeData, ExchangeData.Builder> InternalFieldAccessors
        {
            get { return global::Service.DataChangeModel.internal__static_Test_ExchangeData__FieldAccessorTable; }
        }

        public const int SequenceIdFieldNumber = 1;
        private bool hasSequenceId;
        private uint sequenceId_ = 0;
        public bool HasSequenceId
        {
            get { return hasSequenceId; }
        }
        [global::System.CLSCompliant(false)]
        public uint SequenceId
        {
            get { return sequenceId_; }
        }

        public const int MessageTypeFieldNumber = 2;
        private bool hasMessageType;
        private bool messageType_ = false;
        public bool HasMessageType
        {
            get { return hasMessageType; }
        }
        public bool MessageType
        {
            get { return messageType_; }
        }

        public const int IsRequestFieldNumber = 3;
        private bool hasIsRequest;
        private bool isRequest_ = false;
        public bool HasIsRequest
        {
            get { return hasIsRequest; }
        }
        public bool IsRequest
        {
            get { return isRequest_; }
        }

        public const int JsonBodyFieldNumber = 4;
        private bool hasJsonBody;
        private string jsonBody_ = "";
        public bool HasJsonBody
        {
            get { return hasJsonBody; }
        }
        public string JsonBody
        {
            get { return jsonBody_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasSequenceId) return false;
                if (!hasMessageType) return false;
                if (!hasIsRequest) return false;
                return true;
            }
        }

        public override void WriteTo(pb::CodedOutputStream output)
        {
            int size = SerializedSize;
            if (HasSequenceId)
            {
                output.WriteFixed32(1, SequenceId);
            }
            if (HasMessageType)
            {
                output.WriteBool(2, MessageType);
            }
            if (HasIsRequest)
            {
                output.WriteBool(3, IsRequest);
            }
            if (HasJsonBody)
            {
                output.WriteString(4, JsonBody);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (HasSequenceId)
                {
                    size += pb::CodedOutputStream.ComputeFixed32Size(1, SequenceId);
                }
                if (HasMessageType)
                {
                    size += pb::CodedOutputStream.ComputeBoolSize(2, MessageType);
                }
                if (HasIsRequest)
                {
                    size += pb::CodedOutputStream.ComputeBoolSize(3, IsRequest);
                }
                if (HasJsonBody)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, JsonBody);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ExchangeData ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExchangeData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExchangeData ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExchangeData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExchangeData ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExchangeData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ExchangeData ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ExchangeData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ExchangeData ParseFrom(pb::CodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExchangeData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ExchangeData prototype)
        {
            return (Builder)new Builder().MergeFrom(prototype);
        }

        public sealed partial class Builder : pb::GeneratedBuilder<ExchangeData, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder() { }

            ExchangeData result = new ExchangeData();

            protected override ExchangeData MessageBeingBuilt
            {
                get { return result; }
            }

            public override Builder Clear()
            {
                result = new ExchangeData();
                return this;
            }

            public override Builder Clone()
            {
                return new Builder().MergeFrom(result);
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::Service.ExchangeData.Descriptor; }
            }

            public override ExchangeData DefaultInstanceForType
            {
                get { return global::Service.ExchangeData.DefaultInstance; }
            }

            public override ExchangeData BuildPartial()
            {
                if (result == null)
                {
                    throw new global::System.InvalidOperationException("build() has already been called on this Builder");
                }
                ExchangeData returnMe = result;
                result = null;
                return returnMe;
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ExchangeData)
                {
                    return MergeFrom((ExchangeData)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ExchangeData other)
            {
                if (other == global::Service.ExchangeData.DefaultInstance) return this;
                if (other.HasSequenceId)
                {
                    SequenceId = other.SequenceId;
                }
                if (other.HasMessageType)
                {
                    MessageType = other.MessageType;
                }
                if (other.HasIsRequest)
                {
                    IsRequest = other.IsRequest;
                }
                if (other.HasJsonBody)
                {
                    JsonBody = other.JsonBody;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::CodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                pb::UnknownFieldSet.Builder unknownFields = null;
                while (true)
                {
                    uint tag = input.ReadTag();
                    switch (tag)
                    {
                        case 0:
                            {
                                if (unknownFields != null)
                                {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag);
                                break;
                            }
                        case 13:
                            {
                                SequenceId = input.ReadFixed32();
                                break;
                            }
                        case 16:
                            {
                                MessageType = input.ReadBool();
                                break;
                            }
                        case 24:
                            {
                                IsRequest = input.ReadBool();
                                break;
                            }
                        case 34:
                            {
                                JsonBody = input.ReadString();
                                break;
                            }
                    }
                }
            }


            public bool HasSequenceId
            {
                get { return result.HasSequenceId; }
            }
            [global::System.CLSCompliant(false)]
            public uint SequenceId
            {
                get { return result.SequenceId; }
                set { SetSequenceId(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSequenceId(uint value)
            {
                result.hasSequenceId = true;
                result.sequenceId_ = value;
                return this;
            }
            public Builder ClearSequenceId()
            {
                result.hasSequenceId = false;
                result.sequenceId_ = 0;
                return this;
            }

            public bool HasMessageType
            {
                get { return result.HasMessageType; }
            }
            public bool MessageType
            {
                get { return result.MessageType; }
                set { SetMessageType(value); }
            }
            public Builder SetMessageType(bool value)
            {
                result.hasMessageType = true;
                result.messageType_ = value;
                return this;
            }
            public Builder ClearMessageType()
            {
                result.hasMessageType = false;
                result.messageType_ = false;
                return this;
            }

            public bool HasIsRequest
            {
                get { return result.HasIsRequest; }
            }
            public bool IsRequest
            {
                get { return result.IsRequest; }
                set { SetIsRequest(value); }
            }
            public Builder SetIsRequest(bool value)
            {
                result.hasIsRequest = true;
                result.isRequest_ = value;
                return this;
            }
            public Builder ClearIsRequest()
            {
                result.hasIsRequest = false;
                result.isRequest_ = false;
                return this;
            }

            public bool HasJsonBody
            {
                get { return result.HasJsonBody; }
            }
            public string JsonBody
            {
                get { return result.JsonBody; }
                set { SetJsonBody(value); }
            }
            public Builder SetJsonBody(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                result.hasJsonBody = true;
                result.jsonBody_ = value;
                return this;
            }
            public Builder ClearJsonBody()
            {
                result.hasJsonBody = false;
                result.jsonBody_ = "";
                return this;
            }
        }
        static ExchangeData()
        {
            object.ReferenceEquals(global::Service.DataChangeModel.Descriptor, null);
        }
    }

    #endregion

}
